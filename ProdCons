import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
public class ProdCons {
    static List<Integer> list = new ArrayList<Integer>();
    static class Producer implements Runnable {
        List<Integer> list;
        public Producer(List<Integer> list) {
            this.list = list;
        }
        @Override
        public void run() {
            synchronized (list) {
                for (int i = 0; i < 10; i++) {
                    if (list.size() >= 1) {
                        try {
                            System.out.println("The producer is in wait state");
                            list.wait();
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();
                        }
                    }
                    System.out.println("The producer is " + i);
                    list.add(i);
                    list.notifyAll();
                    try {
                        Thread.sleep(500);
                    } catch (InterruptedException ex) {
                        ex.printStackTrace();
                    }
                }

            }   
        }
    }
    static class Consumer implements Runnable {
        List<Integer> list;
        public Consumer(List<Integer> list) {
            this.list = list;
        }
        @Override
        public void run() {
            synchronized (list) {
                for (int i = 0; i < 10; i++) {
                    while (list.isEmpty()) {
                        System.out.println("The consumer is in wait state");
                        try {
                            list.wait();
                        } catch (InterruptedException ex) {
                            ex.printStackTrace();;
                        }
                    }
                    int k = list.remove(0);
                    System.out.println("The consumer id is " + k);
                    list.notifyAll();
                    try {
                        Thread.sleep(500);
                    }catch (InterruptedException ex) {
			ex.printStackTrace();
                    }
		}
	}
}
}
public static void main(String[] args) {
        Thread prod = new Thread(new Producer(list));
        Thread cons = new Thread(new Consumer(list));
        prod.start();
        cons.start();
	}
}
